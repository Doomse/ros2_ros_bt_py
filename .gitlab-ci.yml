variables:
  CI_SCRIPTS_BRANCH: master
  DOCS_SOURCE: "ros_bt_py/doc/source"
  AFTER_INSTALL_TARGET_DEPENDENCIES: "pip3 install coverage[toml]"
  UPSTREAM_WORKSPACE: "upstream_workspace.yaml"
  DEB_BUILD: "false"

stages:
  - check
  - build
  - upload
  - deploy

.build_matrix:
  parallel:
    matrix:
      - ROS_DISTRO: humble
        CI_IMAGE: ids-git.fzi.de:5555/continuous_integration/ci_docker_images/ubuntu_22.04_ros2:humble
      - ROS_DISTRO: iron
        CI_IMAGE: ids-git.fzi.de:5555/continuous_integration/ci_docker_images/ubuntu_22.04_ros2:iron
      - ROS_DISTRO: rolling
        CI_IMAGE: ids-git.fzi.de:5555/continuous_integration/ci_docker_images/ubuntu_22.04_ros2:rolling
include:
  - project: 'continuous_integration/ci_scripts'
    ref:  master
    file: '/gitlab-ci-yml/ros2_pipeline.yml'

  - project: 'continuous_integration/ci_scripts'
    ref: master
    file: '/gitlab-ci-yml/doc_sphinx.yml'

pre-commit:
  image: $CI_IMAGE
  stage: check
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  script:
    - source /opt/ros/${ROS_DISTRO}/setup.bash
    - pip3 install pre-commit # install pre-commit
    - pre-commit run -a
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  parallel: !reference [.build_matrix, parallel]

industrial_ci:
    after_script:
    - ${HOME}/ci_scripts/catkin_build_scripts/python_coverage.sh "/root/target_ws/build" || true
    - ${HOME}/ci_scripts/catkin_build_scripts/combine_coverage.sh "/root/target_ws" || true
    - gcovr --xml-pretty --exclude-unreachable-branches -o coverage_cpp.xml -e ".*test/.*" -e ".*devel/.*" -e ".*tests/.*" --root /root/target_ws || true
    - cp -r /root/target_ws/build ./build
    - sed -i 's/install\/ros_bt_py\/lib\/python3.10\/site-packages/src\/ros_bt_py\/ros_bt_py\/src/g' coverage_python.xml
